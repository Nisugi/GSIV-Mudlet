-- Create Cooldown Window
GUIFlex.Cooldowns = Adjustable.Container:new({ 
  name = "GUIFlex.Cooldowns", 
  titleText = "Cooldowns", 
  x = "0%", y = "10%",
  width = "200px", height = "20%",
})

-- Create Background Layer for the Mesh Pattern
GUIFlex.CooldownsBG = Geyser.Label:new({
  name = "GUIFlex.CooldownsBG",
  x = "0%", y = "0%",
  width = "100%", height = "100%"
}, GUIFlex.Cooldowns)

GUIFlex.CooldownsBG:setBackgroundImage(imagePath .. "MeshBackground.png")

-- Container for cooldown list
GUIFlex.CooldownList = Geyser.Container:new({
  name = "GUIFlex.CooldownList",
  x = "0%", y = "0%",
  width = "100%", height = "100%"
}, GUIFlex.Cooldowns)

-- Table to track Debuff Labels
GUIFlex.CooldownEntries = {}



-- Default color for unknown spells
local defaultColor = {128, 128, 128} -- Grey

-- Function to determine text color based on background brightness
local function getTextColor(r, g, b)
    local brightness = (r * 0.299 + g * 0.587 + b * 0.114)
    local color = brightness > 128 and "black" or "white"
    return color
end

-- Function to update buffs display
function updateCooldowns()
    -- Clear previous entries
    for _, cooldownLabel in pairs(GUIFlex.CooldownEntries or {}) do
        cooldownLabel:hide()
    end
    GUIFlex.CooldownEntries = {}

    local yOffset = 0
    local cooldownHeight = 17 -- Each cooldown row height

    -- Iterate over activeCooldowns and display them
    for spellID, cooldown in pairs(activeCooldowns) do
        -- Create time label (separate from cooldown bar)
        local timeLabel = Geyser.Label:new({
            name = "CooldownTime_" .. spellID,
            x = "0%", y = yOffset .. "px",
            width = "20%", height = cooldownHeight .. "px",
        }, GUIFlex.CooldownList)

        timeLabel:setStyleSheet("color: white; font-size: 12px; text-align: right; padding-right: 1px; background-color: rgba(0, 0, 0, 0.5);")
        timeLabel:echo(string.format("<b>%s</b>", cooldown.time))

        -- Determine colors based on spell name
        local color = spellColors[cooldown.name] or defaultColor
        local bgColor = string.format("rgb(%d, %d, %d)", color[1], color[2], color[3])
        local textColor = getTextColor(color[1], color[2], color[3])

        -- Create buff bar (aligned after the time)
        local cooldownLabel = Geyser.Label:new({
            name = "Cooldown_" .. spellID,
            x = "22%", y = yOffset .. "px",
            width = "78%", height = cooldownHeight .. "px",
        }, GUIFlex.CooldownList)

        cooldownLabel:setStyleSheet(string.format([[
            background-color: %s;
            border: 1px solid #404040;
            font-size: 12px;
            padding-left: 5px;
        ]], bgColor))

        cooldownLabel:echo(string.format("<b style='color:%s;'>%s</b>", textColor, cooldown.name))

        -- Store labels and update Y offset
        GUIFlex.CooldownEntries[spellID] = cooldownLabel
        yOffset = yOffset + cooldownHeight
    end
end

-- Example: Updating Buffs when activeBuffs changes
updateCooldowns()
